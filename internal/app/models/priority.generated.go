// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package models

import (
	"fmt"
	"strings"
)

const (
	// PriorityLow is a Priority of type Low.
	PriorityLow Priority = iota
	// PriorityMedium is a Priority of type Medium.
	PriorityMedium
	// PriorityHigh is a Priority of type High.
	PriorityHigh
	// PriorityCritical is a Priority of type Critical.
	PriorityCritical
)

var ErrInvalidPriority = fmt.Errorf("not a valid Priority, try [%s]", strings.Join(_PriorityNames, ", "))

const _PriorityName = "lowmediumhighcritical"

var _PriorityNames = []string{
	_PriorityName[0:3],
	_PriorityName[3:9],
	_PriorityName[9:13],
	_PriorityName[13:21],
}

// PriorityNames returns a list of possible string values of Priority.
func PriorityNames() []string {
	tmp := make([]string, len(_PriorityNames))
	copy(tmp, _PriorityNames)
	return tmp
}

// PriorityValues returns a list of the values for Priority
func PriorityValues() []Priority {
	return []Priority{
		PriorityLow,
		PriorityMedium,
		PriorityHigh,
		PriorityCritical,
	}
}

var _PriorityMap = map[Priority]string{
	PriorityLow:      _PriorityName[0:3],
	PriorityMedium:   _PriorityName[3:9],
	PriorityHigh:     _PriorityName[9:13],
	PriorityCritical: _PriorityName[13:21],
}

// String implements the Stringer interface.
func (x Priority) String() string {
	if str, ok := _PriorityMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Priority(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Priority) IsValid() bool {
	_, ok := _PriorityMap[x]
	return ok
}

var _PriorityValue = map[string]Priority{
	_PriorityName[0:3]:   PriorityLow,
	_PriorityName[3:9]:   PriorityMedium,
	_PriorityName[9:13]:  PriorityHigh,
	_PriorityName[13:21]: PriorityCritical,
}

// ParsePriority attempts to convert a string to a Priority.
func ParsePriority(name string) (Priority, error) {
	if x, ok := _PriorityValue[name]; ok {
		return x, nil
	}
	return Priority(0), fmt.Errorf("%s is %w", name, ErrInvalidPriority)
}

func (x Priority) Ptr() *Priority {
	return &x
}

// MarshalText implements the text marshaller method.
func (x Priority) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Priority) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePriority(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *Priority) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
