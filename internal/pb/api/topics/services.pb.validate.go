// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/topics/services.proto

package task_tracker_topics

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTopicsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTopicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopicsRequestMultiError, or nil if none found.
func (m *GetTopicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTopicsRequestMultiError(errors)
	}

	return nil
}

// GetTopicsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTopicsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTopicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicsRequestMultiError) AllErrors() []error { return m }

// GetTopicsRequestValidationError is the validation error returned by
// GetTopicsRequest.Validate if the designated constraints aren't met.
type GetTopicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsRequestValidationError) ErrorName() string { return "GetTopicsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTopicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsRequestValidationError{}

// Validate checks the field values on GetTopicsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTopicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopicsResponseMultiError, or nil if none found.
func (m *GetTopicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopicsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopicsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopicsResponseValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTopicsResponseMultiError(errors)
	}

	return nil
}

// GetTopicsResponseMultiError is an error wrapping multiple validation errors
// returned by GetTopicsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTopicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicsResponseMultiError) AllErrors() []error { return m }

// GetTopicsResponseValidationError is the validation error returned by
// GetTopicsResponse.Validate if the designated constraints aren't met.
type GetTopicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsResponseValidationError) ErrorName() string {
	return "GetTopicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsResponseValidationError{}

// Validate checks the field values on CreateTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTopicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTopicsRequestMultiError, or nil if none found.
func (m *CreateTopicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopicsToCreate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTopicsRequestValidationError{
						field:  fmt.Sprintf("TopicsToCreate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTopicsRequestValidationError{
						field:  fmt.Sprintf("TopicsToCreate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTopicsRequestValidationError{
					field:  fmt.Sprintf("TopicsToCreate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateTopicsRequestMultiError(errors)
	}

	return nil
}

// CreateTopicsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTopicsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTopicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicsRequestMultiError) AllErrors() []error { return m }

// CreateTopicsRequestValidationError is the validation error returned by
// CreateTopicsRequest.Validate if the designated constraints aren't met.
type CreateTopicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicsRequestValidationError) ErrorName() string {
	return "CreateTopicsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicsRequestValidationError{}

// Validate checks the field values on CreateTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTopicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTopicsResponseMultiError, or nil if none found.
func (m *CreateTopicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTopicsResponseMultiError(errors)
	}

	return nil
}

// CreateTopicsResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTopicsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTopicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicsResponseMultiError) AllErrors() []error { return m }

// CreateTopicsResponseValidationError is the validation error returned by
// CreateTopicsResponse.Validate if the designated constraints aren't met.
type CreateTopicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicsResponseValidationError) ErrorName() string {
	return "CreateTopicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicsResponseValidationError{}

// Validate checks the field values on UpdateTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTopicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTopicsRequestMultiError, or nil if none found.
func (m *UpdateTopicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTopicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopicsToUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTopicsRequestValidationError{
						field:  fmt.Sprintf("TopicsToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTopicsRequestValidationError{
						field:  fmt.Sprintf("TopicsToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTopicsRequestValidationError{
					field:  fmt.Sprintf("TopicsToUpdate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateTopicsRequestMultiError(errors)
	}

	return nil
}

// UpdateTopicsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTopicsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTopicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTopicsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTopicsRequestMultiError) AllErrors() []error { return m }

// UpdateTopicsRequestValidationError is the validation error returned by
// UpdateTopicsRequest.Validate if the designated constraints aren't met.
type UpdateTopicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTopicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTopicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTopicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTopicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTopicsRequestValidationError) ErrorName() string {
	return "UpdateTopicsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTopicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTopicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTopicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTopicsRequestValidationError{}

// Validate checks the field values on UpdateTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTopicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTopicsResponseMultiError, or nil if none found.
func (m *UpdateTopicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTopicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTopicsResponseMultiError(errors)
	}

	return nil
}

// UpdateTopicsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTopicsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTopicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTopicsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTopicsResponseMultiError) AllErrors() []error { return m }

// UpdateTopicsResponseValidationError is the validation error returned by
// UpdateTopicsResponse.Validate if the designated constraints aren't met.
type UpdateTopicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTopicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTopicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTopicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTopicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTopicsResponseValidationError) ErrorName() string {
	return "UpdateTopicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTopicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTopicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTopicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTopicsResponseValidationError{}

// Validate checks the field values on DeleteTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTopicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTopicsRequestMultiError, or nil if none found.
func (m *DeleteTopicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTopicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTopicsRequestMultiError(errors)
	}

	return nil
}

// DeleteTopicsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTopicsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTopicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTopicsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTopicsRequestMultiError) AllErrors() []error { return m }

// DeleteTopicsRequestValidationError is the validation error returned by
// DeleteTopicsRequest.Validate if the designated constraints aren't met.
type DeleteTopicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTopicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTopicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTopicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTopicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTopicsRequestValidationError) ErrorName() string {
	return "DeleteTopicsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTopicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTopicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTopicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTopicsRequestValidationError{}

// Validate checks the field values on DeleteTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTopicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTopicsResponseMultiError, or nil if none found.
func (m *DeleteTopicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTopicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTopicsResponseMultiError(errors)
	}

	return nil
}

// DeleteTopicsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTopicsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTopicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTopicsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTopicsResponseMultiError) AllErrors() []error { return m }

// DeleteTopicsResponseValidationError is the validation error returned by
// DeleteTopicsResponse.Validate if the designated constraints aren't met.
type DeleteTopicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTopicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTopicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTopicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTopicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTopicsResponseValidationError) ErrorName() string {
	return "DeleteTopicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTopicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTopicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTopicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTopicsResponseValidationError{}

// Validate checks the field values on CreateTopicsRequest_TopicPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTopicsRequest_TopicPrototype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicsRequest_TopicPrototype
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTopicsRequest_TopicPrototypeMultiError, or nil if none found.
func (m *CreateTopicsRequest_TopicPrototype) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicsRequest_TopicPrototype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateTopicsRequest_TopicPrototypeMultiError(errors)
	}

	return nil
}

// CreateTopicsRequest_TopicPrototypeMultiError is an error wrapping multiple
// validation errors returned by
// CreateTopicsRequest_TopicPrototype.ValidateAll() if the designated
// constraints aren't met.
type CreateTopicsRequest_TopicPrototypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicsRequest_TopicPrototypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicsRequest_TopicPrototypeMultiError) AllErrors() []error { return m }

// CreateTopicsRequest_TopicPrototypeValidationError is the validation error
// returned by CreateTopicsRequest_TopicPrototype.Validate if the designated
// constraints aren't met.
type CreateTopicsRequest_TopicPrototypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicsRequest_TopicPrototypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicsRequest_TopicPrototypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicsRequest_TopicPrototypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicsRequest_TopicPrototypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicsRequest_TopicPrototypeValidationError) ErrorName() string {
	return "CreateTopicsRequest_TopicPrototypeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicsRequest_TopicPrototypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicsRequest_TopicPrototype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicsRequest_TopicPrototypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicsRequest_TopicPrototypeValidationError{}

// Validate checks the field values on UpdateTopicsRequest_TopicPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateTopicsRequest_TopicPrototype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTopicsRequest_TopicPrototype
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateTopicsRequest_TopicPrototypeMultiError, or nil if none found.
func (m *UpdateTopicsRequest_TopicPrototype) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTopicsRequest_TopicPrototype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateTopicsRequest_TopicPrototypeMultiError(errors)
	}

	return nil
}

// UpdateTopicsRequest_TopicPrototypeMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTopicsRequest_TopicPrototype.ValidateAll() if the designated
// constraints aren't met.
type UpdateTopicsRequest_TopicPrototypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTopicsRequest_TopicPrototypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTopicsRequest_TopicPrototypeMultiError) AllErrors() []error { return m }

// UpdateTopicsRequest_TopicPrototypeValidationError is the validation error
// returned by UpdateTopicsRequest_TopicPrototype.Validate if the designated
// constraints aren't met.
type UpdateTopicsRequest_TopicPrototypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTopicsRequest_TopicPrototypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTopicsRequest_TopicPrototypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTopicsRequest_TopicPrototypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTopicsRequest_TopicPrototypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTopicsRequest_TopicPrototypeValidationError) ErrorName() string {
	return "UpdateTopicsRequest_TopicPrototypeValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTopicsRequest_TopicPrototypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTopicsRequest_TopicPrototype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTopicsRequest_TopicPrototypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTopicsRequest_TopicPrototypeValidationError{}
