// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/boards/services.proto

package task_tracker_boards

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetBoardsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBoardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBoardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBoardsRequestMultiError, or nil if none found.
func (m *GetBoardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBoardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := GetBoardsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBoardsRequestMultiError(errors)
	}

	return nil
}

// GetBoardsRequestMultiError is an error wrapping multiple validation errors
// returned by GetBoardsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBoardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBoardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBoardsRequestMultiError) AllErrors() []error { return m }

// GetBoardsRequestValidationError is the validation error returned by
// GetBoardsRequest.Validate if the designated constraints aren't met.
type GetBoardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBoardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBoardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBoardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBoardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBoardsRequestValidationError) ErrorName() string { return "GetBoardsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBoardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBoardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBoardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBoardsRequestValidationError{}

// Validate checks the field values on GetBoardsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBoardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBoardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBoardsResponseMultiError, or nil if none found.
func (m *GetBoardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBoardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBoards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBoardsResponseValidationError{
						field:  fmt.Sprintf("Boards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBoardsResponseValidationError{
						field:  fmt.Sprintf("Boards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBoardsResponseValidationError{
					field:  fmt.Sprintf("Boards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBoardsResponseMultiError(errors)
	}

	return nil
}

// GetBoardsResponseMultiError is an error wrapping multiple validation errors
// returned by GetBoardsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBoardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBoardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBoardsResponseMultiError) AllErrors() []error { return m }

// GetBoardsResponseValidationError is the validation error returned by
// GetBoardsResponse.Validate if the designated constraints aren't met.
type GetBoardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBoardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBoardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBoardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBoardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBoardsResponseValidationError) ErrorName() string {
	return "GetBoardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBoardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBoardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBoardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBoardsResponseValidationError{}

// Validate checks the field values on CreateBoardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBoardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBoardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBoardsRequestMultiError, or nil if none found.
func (m *CreateBoardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBoardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetBoardsToCreate()) < 1 {
		err := CreateBoardsRequestValidationError{
			field:  "BoardsToCreate",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBoardsToCreate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateBoardsRequestValidationError{
						field:  fmt.Sprintf("BoardsToCreate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateBoardsRequestValidationError{
						field:  fmt.Sprintf("BoardsToCreate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateBoardsRequestValidationError{
					field:  fmt.Sprintf("BoardsToCreate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateBoardsRequestMultiError(errors)
	}

	return nil
}

// CreateBoardsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBoardsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBoardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBoardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBoardsRequestMultiError) AllErrors() []error { return m }

// CreateBoardsRequestValidationError is the validation error returned by
// CreateBoardsRequest.Validate if the designated constraints aren't met.
type CreateBoardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBoardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBoardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBoardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBoardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBoardsRequestValidationError) ErrorName() string {
	return "CreateBoardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBoardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBoardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBoardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBoardsRequestValidationError{}

// Validate checks the field values on CreateBoardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBoardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBoardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBoardsResponseMultiError, or nil if none found.
func (m *CreateBoardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBoardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBoardsResponseMultiError(errors)
	}

	return nil
}

// CreateBoardsResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBoardsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBoardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBoardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBoardsResponseMultiError) AllErrors() []error { return m }

// CreateBoardsResponseValidationError is the validation error returned by
// CreateBoardsResponse.Validate if the designated constraints aren't met.
type CreateBoardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBoardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBoardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBoardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBoardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBoardsResponseValidationError) ErrorName() string {
	return "CreateBoardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBoardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBoardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBoardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBoardsResponseValidationError{}

// Validate checks the field values on UpdateBoardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBoardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBoardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBoardsRequestMultiError, or nil if none found.
func (m *UpdateBoardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBoardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetBoardsToUpdate()) < 1 {
		err := UpdateBoardsRequestValidationError{
			field:  "BoardsToUpdate",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBoardsToUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateBoardsRequestValidationError{
						field:  fmt.Sprintf("BoardsToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateBoardsRequestValidationError{
						field:  fmt.Sprintf("BoardsToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateBoardsRequestValidationError{
					field:  fmt.Sprintf("BoardsToUpdate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateBoardsRequestMultiError(errors)
	}

	return nil
}

// UpdateBoardsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBoardsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBoardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBoardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBoardsRequestMultiError) AllErrors() []error { return m }

// UpdateBoardsRequestValidationError is the validation error returned by
// UpdateBoardsRequest.Validate if the designated constraints aren't met.
type UpdateBoardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBoardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBoardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBoardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBoardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBoardsRequestValidationError) ErrorName() string {
	return "UpdateBoardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBoardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBoardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBoardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBoardsRequestValidationError{}

// Validate checks the field values on UpdateBoardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBoardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBoardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBoardsResponseMultiError, or nil if none found.
func (m *UpdateBoardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBoardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBoardsResponseMultiError(errors)
	}

	return nil
}

// UpdateBoardsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBoardsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBoardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBoardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBoardsResponseMultiError) AllErrors() []error { return m }

// UpdateBoardsResponseValidationError is the validation error returned by
// UpdateBoardsResponse.Validate if the designated constraints aren't met.
type UpdateBoardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBoardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBoardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBoardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBoardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBoardsResponseValidationError) ErrorName() string {
	return "UpdateBoardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBoardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBoardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBoardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBoardsResponseValidationError{}

// Validate checks the field values on DeleteBoardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBoardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBoardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBoardsRequestMultiError, or nil if none found.
func (m *DeleteBoardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBoardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := DeleteBoardsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBoardsRequestMultiError(errors)
	}

	return nil
}

// DeleteBoardsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBoardsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBoardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBoardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBoardsRequestMultiError) AllErrors() []error { return m }

// DeleteBoardsRequestValidationError is the validation error returned by
// DeleteBoardsRequest.Validate if the designated constraints aren't met.
type DeleteBoardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBoardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBoardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBoardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBoardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBoardsRequestValidationError) ErrorName() string {
	return "DeleteBoardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBoardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBoardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBoardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBoardsRequestValidationError{}

// Validate checks the field values on DeleteBoardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBoardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBoardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBoardsResponseMultiError, or nil if none found.
func (m *DeleteBoardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBoardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBoardsResponseMultiError(errors)
	}

	return nil
}

// DeleteBoardsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBoardsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBoardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBoardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBoardsResponseMultiError) AllErrors() []error { return m }

// DeleteBoardsResponseValidationError is the validation error returned by
// DeleteBoardsResponse.Validate if the designated constraints aren't met.
type DeleteBoardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBoardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBoardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBoardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBoardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBoardsResponseValidationError) ErrorName() string {
	return "DeleteBoardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBoardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBoardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBoardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBoardsResponseValidationError{}

// Validate checks the field values on CreateBoardsRequest_BoardPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBoardsRequest_BoardPrototype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBoardsRequest_BoardPrototype
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBoardsRequest_BoardPrototypeMultiError, or nil if none found.
func (m *CreateBoardsRequest_BoardPrototype) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBoardsRequest_BoardPrototype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateBoardsRequest_BoardPrototypeValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateBoardsRequest_BoardPrototypeMultiError(errors)
	}

	return nil
}

// CreateBoardsRequest_BoardPrototypeMultiError is an error wrapping multiple
// validation errors returned by
// CreateBoardsRequest_BoardPrototype.ValidateAll() if the designated
// constraints aren't met.
type CreateBoardsRequest_BoardPrototypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBoardsRequest_BoardPrototypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBoardsRequest_BoardPrototypeMultiError) AllErrors() []error { return m }

// CreateBoardsRequest_BoardPrototypeValidationError is the validation error
// returned by CreateBoardsRequest_BoardPrototype.Validate if the designated
// constraints aren't met.
type CreateBoardsRequest_BoardPrototypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBoardsRequest_BoardPrototypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBoardsRequest_BoardPrototypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBoardsRequest_BoardPrototypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBoardsRequest_BoardPrototypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBoardsRequest_BoardPrototypeValidationError) ErrorName() string {
	return "CreateBoardsRequest_BoardPrototypeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBoardsRequest_BoardPrototypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBoardsRequest_BoardPrototype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBoardsRequest_BoardPrototypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBoardsRequest_BoardPrototypeValidationError{}

// Validate checks the field values on UpdateBoardsRequest_BoardPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBoardsRequest_BoardPrototype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBoardsRequest_BoardPrototype
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBoardsRequest_BoardPrototypeMultiError, or nil if none found.
func (m *UpdateBoardsRequest_BoardPrototype) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBoardsRequest_BoardPrototype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {

		if utf8.RuneCountInString(m.GetName()) < 1 {
			err := UpdateBoardsRequest_BoardPrototypeValidationError{
				field:  "Name",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateBoardsRequest_BoardPrototypeMultiError(errors)
	}

	return nil
}

// UpdateBoardsRequest_BoardPrototypeMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBoardsRequest_BoardPrototype.ValidateAll() if the designated
// constraints aren't met.
type UpdateBoardsRequest_BoardPrototypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBoardsRequest_BoardPrototypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBoardsRequest_BoardPrototypeMultiError) AllErrors() []error { return m }

// UpdateBoardsRequest_BoardPrototypeValidationError is the validation error
// returned by UpdateBoardsRequest_BoardPrototype.Validate if the designated
// constraints aren't met.
type UpdateBoardsRequest_BoardPrototypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBoardsRequest_BoardPrototypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBoardsRequest_BoardPrototypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBoardsRequest_BoardPrototypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBoardsRequest_BoardPrototypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBoardsRequest_BoardPrototypeValidationError) ErrorName() string {
	return "UpdateBoardsRequest_BoardPrototypeValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBoardsRequest_BoardPrototypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBoardsRequest_BoardPrototype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBoardsRequest_BoardPrototypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBoardsRequest_BoardPrototypeValidationError{}
