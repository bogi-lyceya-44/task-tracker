// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/tasks/services.proto

package task_tracker_tasks

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetTasksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTasksRequestMultiError, or nil if none found.
func (m *GetTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTasksRequestMultiError(errors)
	}

	return nil
}

// GetTasksRequestMultiError is an error wrapping multiple validation errors
// returned by GetTasksRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTasksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTasksRequestMultiError) AllErrors() []error { return m }

// GetTasksRequestValidationError is the validation error returned by
// GetTasksRequest.Validate if the designated constraints aren't met.
type GetTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTasksRequestValidationError) ErrorName() string { return "GetTasksRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTasksRequestValidationError{}

// Validate checks the field values on GetTasksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTasksResponseMultiError, or nil if none found.
func (m *GetTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTasksResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTasksResponseMultiError(errors)
	}

	return nil
}

// GetTasksResponseMultiError is an error wrapping multiple validation errors
// returned by GetTasksResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTasksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTasksResponseMultiError) AllErrors() []error { return m }

// GetTasksResponseValidationError is the validation error returned by
// GetTasksResponse.Validate if the designated constraints aren't met.
type GetTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTasksResponseValidationError) ErrorName() string { return "GetTasksResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTasksResponseValidationError{}

// Validate checks the field values on CreateTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTasksRequestMultiError, or nil if none found.
func (m *CreateTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasksToCreate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTasksRequestValidationError{
						field:  fmt.Sprintf("TasksToCreate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTasksRequestValidationError{
						field:  fmt.Sprintf("TasksToCreate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTasksRequestValidationError{
					field:  fmt.Sprintf("TasksToCreate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateTasksRequestMultiError(errors)
	}

	return nil
}

// CreateTasksRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTasksRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTasksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTasksRequestMultiError) AllErrors() []error { return m }

// CreateTasksRequestValidationError is the validation error returned by
// CreateTasksRequest.Validate if the designated constraints aren't met.
type CreateTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTasksRequestValidationError) ErrorName() string {
	return "CreateTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTasksRequestValidationError{}

// Validate checks the field values on CreateTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTasksResponseMultiError, or nil if none found.
func (m *CreateTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTasksResponseMultiError(errors)
	}

	return nil
}

// CreateTasksResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTasksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTasksResponseMultiError) AllErrors() []error { return m }

// CreateTasksResponseValidationError is the validation error returned by
// CreateTasksResponse.Validate if the designated constraints aren't met.
type CreateTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTasksResponseValidationError) ErrorName() string {
	return "CreateTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTasksResponseValidationError{}

// Validate checks the field values on UpdateTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTasksRequestMultiError, or nil if none found.
func (m *UpdateTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasksToUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTasksRequestValidationError{
						field:  fmt.Sprintf("TasksToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTasksRequestValidationError{
						field:  fmt.Sprintf("TasksToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTasksRequestValidationError{
					field:  fmt.Sprintf("TasksToUpdate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateTasksRequestMultiError(errors)
	}

	return nil
}

// UpdateTasksRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTasksRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTasksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTasksRequestMultiError) AllErrors() []error { return m }

// UpdateTasksRequestValidationError is the validation error returned by
// UpdateTasksRequest.Validate if the designated constraints aren't met.
type UpdateTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTasksRequestValidationError) ErrorName() string {
	return "UpdateTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTasksRequestValidationError{}

// Validate checks the field values on UpdateTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTasksResponseMultiError, or nil if none found.
func (m *UpdateTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTasksResponseMultiError(errors)
	}

	return nil
}

// UpdateTasksResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTasksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTasksResponseMultiError) AllErrors() []error { return m }

// UpdateTasksResponseValidationError is the validation error returned by
// UpdateTasksResponse.Validate if the designated constraints aren't met.
type UpdateTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTasksResponseValidationError) ErrorName() string {
	return "UpdateTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTasksResponseValidationError{}

// Validate checks the field values on DeleteTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTasksRequestMultiError, or nil if none found.
func (m *DeleteTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTasksRequestMultiError(errors)
	}

	return nil
}

// DeleteTasksRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTasksRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTasksRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTasksRequestMultiError) AllErrors() []error { return m }

// DeleteTasksRequestValidationError is the validation error returned by
// DeleteTasksRequest.Validate if the designated constraints aren't met.
type DeleteTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTasksRequestValidationError) ErrorName() string {
	return "DeleteTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTasksRequestValidationError{}

// Validate checks the field values on DeleteTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTasksResponseMultiError, or nil if none found.
func (m *DeleteTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTasksResponseMultiError(errors)
	}

	return nil
}

// DeleteTasksResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTasksResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTasksResponseMultiError) AllErrors() []error { return m }

// DeleteTasksResponseValidationError is the validation error returned by
// DeleteTasksResponse.Validate if the designated constraints aren't met.
type DeleteTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTasksResponseValidationError) ErrorName() string {
	return "DeleteTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTasksResponseValidationError{}

// Validate checks the field values on CreateTasksRequest_TaskPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTasksRequest_TaskPrototype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTasksRequest_TaskPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTasksRequest_TaskPrototypeMultiError, or nil if none found.
func (m *CreateTasksRequest_TaskPrototype) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTasksRequest_TaskPrototype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Priority

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTasksRequest_TaskPrototypeValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTasksRequest_TaskPrototypeValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTasksRequest_TaskPrototypeValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTasksRequest_TaskPrototypeValidationError{
					field:  "FinishTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTasksRequest_TaskPrototypeValidationError{
					field:  "FinishTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTasksRequest_TaskPrototypeValidationError{
				field:  "FinishTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTasksRequest_TaskPrototypeMultiError(errors)
	}

	return nil
}

// CreateTasksRequest_TaskPrototypeMultiError is an error wrapping multiple
// validation errors returned by
// CreateTasksRequest_TaskPrototype.ValidateAll() if the designated
// constraints aren't met.
type CreateTasksRequest_TaskPrototypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTasksRequest_TaskPrototypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTasksRequest_TaskPrototypeMultiError) AllErrors() []error { return m }

// CreateTasksRequest_TaskPrototypeValidationError is the validation error
// returned by CreateTasksRequest_TaskPrototype.Validate if the designated
// constraints aren't met.
type CreateTasksRequest_TaskPrototypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTasksRequest_TaskPrototypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTasksRequest_TaskPrototypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTasksRequest_TaskPrototypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTasksRequest_TaskPrototypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTasksRequest_TaskPrototypeValidationError) ErrorName() string {
	return "CreateTasksRequest_TaskPrototypeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTasksRequest_TaskPrototypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTasksRequest_TaskPrototype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTasksRequest_TaskPrototypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTasksRequest_TaskPrototypeValidationError{}

// Validate checks the field values on UpdateTasksRequest_TaskPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateTasksRequest_TaskPrototype) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTasksRequest_TaskPrototype with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTasksRequest_TaskPrototypeMultiError, or nil if none found.
func (m *UpdateTasksRequest_TaskPrototype) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTasksRequest_TaskPrototype) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Priority != nil {
		// no validation rules for Priority
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTasksRequest_TaskPrototypeValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTasksRequest_TaskPrototypeValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTasksRequest_TaskPrototypeValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FinishTime != nil {

		if all {
			switch v := interface{}(m.GetFinishTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTasksRequest_TaskPrototypeValidationError{
						field:  "FinishTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTasksRequest_TaskPrototypeValidationError{
						field:  "FinishTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFinishTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTasksRequest_TaskPrototypeValidationError{
					field:  "FinishTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateTasksRequest_TaskPrototypeMultiError(errors)
	}

	return nil
}

// UpdateTasksRequest_TaskPrototypeMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTasksRequest_TaskPrototype.ValidateAll() if the designated
// constraints aren't met.
type UpdateTasksRequest_TaskPrototypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTasksRequest_TaskPrototypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTasksRequest_TaskPrototypeMultiError) AllErrors() []error { return m }

// UpdateTasksRequest_TaskPrototypeValidationError is the validation error
// returned by UpdateTasksRequest_TaskPrototype.Validate if the designated
// constraints aren't met.
type UpdateTasksRequest_TaskPrototypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTasksRequest_TaskPrototypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTasksRequest_TaskPrototypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTasksRequest_TaskPrototypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTasksRequest_TaskPrototypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTasksRequest_TaskPrototypeValidationError) ErrorName() string {
	return "UpdateTasksRequest_TaskPrototypeValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTasksRequest_TaskPrototypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTasksRequest_TaskPrototype.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTasksRequest_TaskPrototypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTasksRequest_TaskPrototypeValidationError{}
